# Setup oh-my-zsh
ZSH=$HOME/.oh-my-zsh

# Load the git plugin
plugins=(git, zsh-syntax-highlighting)

autoload predict-on
predict-on

autoload -U colors && colors

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

export VIRTUAL_ENV_DISABLE_PROMPT=true

function _dotfiles_maybe_gitbranch() {
	if git rev-parse --is-inside-work-tree &>/dev/null; then
		local branch="$(basename $(git symbolic-ref HEAD 2>/dev/null))" ||
		local branch="detached-head"

		# Count Uncommitted
		local unstaged=$(expr $(git status --porcelain | egrep "^( [A-Z]|\?\?)" | wc -l))
		local staged=$(expr $(git status --porcelain | egrep "^[A-Z]" | wc -l))
		if [[ $staged != 0 || $unstaged != 0 ]]; then
			local gstatus=" %{$reset_color%}(%{$fg[green]%}$staged%{$reset_color%}:%{$fg[yellow]%}$unstaged%{$reset_color%})"
		else
			local gstatus=" %{$reset_color%}(%{$fg[green]%}✓%{$reset_color%})"
		fi

		echo " %{$fg[red]%}⑂ %{$fg[cyan]%}$branch%{$reset_color%}$gstatus"
	fi
}

function _dotfiles_maybe_venv() {
	if type deactivate &>/dev/null; then
		echo " %{$fg[red]%}⚬ %{$fg[cyan]%}$(basename $VIRTUAL_ENV)%{$reset_color%}"
	fi
}

function _dotfiles_gitdir() {
	###
	# This is used instead of git rev-parse --show-toplevel because
	# in some situations it produces more logical output onto the screen
	###

	gitdir="$1"

	while [[ ! -e "$gitdir/.git" ]]; do
		if [[ $gitdir == '/' ]]; then
			return 1
		fi
		gitdir=$(dirname $gitdir)
	done

	echo "$gitdir"
}

function _dotfiles_gitpwd() {
	###
	# Prints the current working directory as a subdirectory of the current project.
	###

	local git_name git_dir real_path
	git_name=''
	git_dir="$(_dotfiles_gitdir $PWD)"
	# "$(git rev-parse --show-toplevel 2>/dev/null)"
	if [[ $? == 0 ]]; then
		git_name=$(basename "$git_dir")

		# Submodule status detection
		git_superdir=$(_dotfiles_gitdir "$(dirname "$git_dir")")
		if [[ $? == 0 ]]; then
			git_name="$(basename $git_superdir):$git_name"
		fi
	else
		if [[ "${PWD##$HOME}" != "$PWD" ]]; then # Inside Home
			git_dir="$HOME"
			git_name='~'
		else                                     # Not inside home
			git_dir='/'
			git_name='/'
		fi
	fi

	rest_path="${PWD##$git_dir}"

	echo "%{$fg[cyan]%}$git_name%{$fg[blue]%}$rest_path%{$reset_color%}"
}

function _dotfiles_install_prompt() {
	###
	# Installs the zsh prompt
	###
	setopt PROMPT_SUBST
    export PS1='
%{$fg[green]%}%n%{$reset_color%}@%{$fg[yellow]%}%m $(_dotfiles_gitpwd)
%{$fg[yellow]%}%#%{$reset_color%}'
	export RPS1='%{ %}$(_dotfiles_maybe_venv)$(_dotfiles_maybe_gitbranch)%(?..%{$fg[red]%} [%?])%{$reset_color%}'

}

_dotfiles_install_prompt

# Run the common shell commands
source ~/Dotfiles/sh/common.sh

clear
